#+STARTUP: inlineimages
#+STARTUP: overview
#+LATEX_HEADER: \usepackage[margin=0.5in]{geometry}

* MONETDB Internals

[[http://sites.computer.org/debull/A12mar/monetdb.pdf]]
[[https://www.monetdb.org/Documentation/MonetDBInternals/Overview][MonetDB Internals]]
[[https://www.monetdb.org/Developers/SourceCompile][Source Compile]]

DOCUMENTATION -> monetdb source/lib/monetdb5/algebra.mal

** Redesign considerations.
 Redesign of the MonetDB software driven by the need to reduce the effort to extend the system into novel directions and to reduce
 the *Total Execution Cost (TEC)*.

 *TEC*:
  - API message handling                (*A*)
  - Parsing and semantic analysis       (*P*)
  - Optimization and plan generation    (*O*)
  - Data access to the persistent store (*D*)
  - Execution of the query terms        (*E*)
  - Result delivery to the application  (*R*)

 OLTP -> Online Transaction Processing -> expected most of the cost to be in (P,O)
 OLAP -> Online Analytical Processing  -> expected most of the cost to be in (D,E,R)

** Storage Model
    - Represents relational tables using vertical fragmentation.
    - Stores each column in a separate {(OID,value)} table,  called a *BAT (Binary Association Table)*
    - Relies on a low-level relational algebra called the BAT algebra, which takes BATs and scalar values as input.
    - The complete result is always stored in (intermediate) BATs, and the result of an SQL query is a collection of BATs.

    - *BAT* is implemented as an ordinary C-array. OID maps to the index in the array.
    - Persistent version of *BAT* is a *memory mapped file*.
    - *O(1) positional database lookup mechanism* (MMU - memory management unit)

** All (relational) operators exploit a small set of properties:
    - seq       - the sequence base, a mapping from array index 0 into a OID value
    - key       - the values in the column are unique
    - nil       - there is at least one NIL value
    - nonil     - it is unknown if there NIL values
    - dense     - the numeric values in the column form a dense sequence
    - sorted    - the column contains a sorted list for ordered domains
    - revsorted - the column contains a reversed sorted list

** Execution Model
    - *MonetDB* kernel is an abstract machine, programmed in the *MonetDB Assemblee Language (MAL)*.
    - Each relational algebra operator corresponds to a *MAL instruction* (zero degrees of freedom).
    - Each *BAT algebra operator* maps to a simple *MAL instruction*.

** Software Stack
    Three software layers:
    - *FRONT-END* *Query language parser and a heuristic, language - and data model - specific optimizer*. *OUTPUT* -> logical plan expressed in MAL.
    - *BACK-END* *Collection of optimizer modules* -> assembled into an optimization pipeline
    - *MAL interpreter* -> contains the library of highly optimized implementation of the binary relational algebra operators.


* Binary Association Tables
#+NAME: fig:figure batfig
#+CAPTION: Bat Sample
#+ATTR_ORG: :width 500
#+ATTR_LATEX: :width 4.0in
#+ATTR_HTML: :width 200
[[./Pictures/BAT.png]]




* MAL Reference (MonetDB Assembly Language)

   - MAL program is considered a specification of intended computation and data flow behavior.
   - Language syntax uses a functional style definition of actions and mark those that affect the flow explicitly.

** Literals (follow the lexical conventions of C)

    |------------------+------------------+---------------------------|
    | *Hardwire Types* | *Temporal Types* | *IPv4 addresses and URLs* |
    |------------------+------------------+---------------------------|
    | bit (bit)        | date             | inet                      |
    |------------------+------------------+---------------------------|
    | bte (byte)       | daytime          | url                       |
    |------------------+------------------+---------------------------|
    | chr (char)       | time             | UUID                      |
    |------------------+------------------+---------------------------|
    | wrd (word)       | timestamp        | json                      |
    |------------------+------------------+---------------------------|
    | sht (short)      | -                | -                         |
    |------------------+------------------+---------------------------|
    | int (integer)    | -                | -                         |
    |------------------+------------------+---------------------------|
    | lng (long)       | -                | -                         |
    |------------------+------------------+---------------------------|
    | oid (object id)  | -                | -                         |
    |------------------+------------------+---------------------------|
    | flt (float)      | -                | -                         |
    |------------------+------------------+---------------------------|
    | dbl (double)     | -                | -                         |
    |------------------+------------------+---------------------------|
    | str (string)     | -                | -                         |
    |------------------+------------------+---------------------------|

** Variables

    *User Defined* -> start with a letter
    *Temporary*    -> start with X_ (generated internally by optimizers)

** Instructions

    *One liners*   -> easy to parse
    
    #+NAME: fig:figure instfig
    #+CAPTION: Instructions example
    #+ATTR_ORG: :width 500
    #+ATTR_LATEX: :width 2.0in
    #+ATTR_HTML: :width 200
    [[./Pictures/instructions-ex.png]]

** Type System

    *Strongly typed language*
    
    #+NAME: fig:figure polyfig
    #+CAPTION: Polymophism example
    #+ATTR_ORG: :width 500
    #+ATTR_LATEX: :width 2.0in
    #+ATTR_HTML: :width 200
    [[./Pictures/poly-ex.png]]

    - Polymorphic given by "any".
    - Type checker (intelligent type resolution).

** Flow of Control

   *For statement implementation:*
   #+NAME: fig:figure forfig
   #+CAPTION: For example
   #+ATTR_ORG: :width 500
   #+ATTR_LATEX: :width 2.0in
   #+ATTR_HTML: :width 200
   [[./Pictures/for-ex.png]]

   *If statement implementation:*
   #+NAME: fig:figure iffig
   #+CAPTION: If example
   #+ATTR_ORG: :width 500
   #+ATTR_LATEX: :width 2.0in
   #+ATTR_HTML: :width 200
   [[./Pictures/if-ex.png]]

** Exceptions

   (*To explore.*)

** Functions

   *Function example*
   #+NAME: fig:figure funfig
   #+CAPTION: Function example
   #+ATTR_ORG: :width 500
   #+ATTR_LATEX: :width 2.0in
   #+ATTR_HTML: :width 200
   [[./Pictures/fun-ex.png]]

   *Side Effects*
   - Functions can be pre-pended with the keyword unsafe.
   - Designates that execution of the function may change the state of the database or sends information to the client.
   - Unsafe functions are critical for the optimizers -> order of execution should be guaranteed.
   - Functions that return *:void* -> unsafe by default.

   *Inline Functions*
   - Functions prepended with the keyword *inline* are a target for the optimizers to be inlined. -> reduce the function call overhead.

** MAL Syntax

   *Expressed in extended Backus–Naur form (EBNF)* [[https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form][Wiki]]

   |--------------------------+---------------------------------|
   | Alternative constructors | (vertical bar) grouped by ()    |
   |--------------------------+---------------------------------|
   | Repetition               | '+'-> at least once; '*'-> many |
   |--------------------------+---------------------------------|
   | Lexical tokens           | small capitals                  |
   |--------------------------+---------------------------------|

   #+NAME: fig:figure syntaxfig
   #+CAPTION: Syntax example
   #+ATTR_ORG: :width 500
   #+ATTR_LATEX: :width 2.0in
   #+ATTR_HTML: :width 200
   [[./Pictures/syntax.png]]

** MAL Interpreter
   
   (*To explore.*)

** MAL Debugger

   (*To explore.*)

** MAL Profiler
   
   The program stethoscope is a simple Linux application that can attach itself to a running MonetDB server and extracts
   the profiler events from concurrent running queries. Stethoscope is an online-only inspection tool, i.e., it only
   monitors the execution state of the current queries and outputs the information in STDOUT for immediate inspection.
   For example, the following command tracks the microsecond ticks for all database instructions denoted in MAL on a database called “voc”:

    $ stethoscope -u monetdb -P monetdb -d voc

    Discontinued:
    - Tachograph
    - Tomograph
    - 

** MAL Optimizers
   *Triggered by experimentation and curiousity*

- Alias Removal
- Building Blocks -> there are examples for a user to build a Optimizer
- Coercions
    Removes coercions that are not needed --> v:= calc.int(23);
    (sloppy code-generator or function call resolution decision)

- Common Subexpressions
    #+NAME: fig:figure syntaxfig
    #+CAPTION: Syntax example
    #+ATTR_ORG: :width 500
    #+ATTR_LATEX: :width 2.0in
    #+ATTR_HTML: :width 200
    [[./Pictures/opt-common-subs-1.png]]              
    
    #+NAME: fig:figure syntaxfig
    #+CAPTION: Syntax example 2
    #+ATTR_ORG: :width 500
    #+ATTR_LATEX: :width 2.0in
    #+ATTR_HTML: :width 200
    [[./Pictures/opt-common-subs-1+.png]]

- Constant Expression Evaluation

    #+NAME: fig:figure syntaxfig
    #+CAPTION: Expression example
    #+ATTR_ORG: :width 500
    #+ATTR_LATEX: :width 2.0in
    #+ATTR_HTML: :width 200
    [[./Pictures/const-exps-eval-1.png]]             
    
    #+NAME: fig:figure syntaxfig
    #+CAPTION: Expression example 2
    #+ATTR_ORG: :width 500
    #+ATTR_LATEX: :width 2.0in
    #+ATTR_HTML: :width 200
    [[./Pictures/const-exps-eval-1+.png]]

- Cost Model
- Data Flow
    Query executions without side effects can be rearranged.
- Garbage Collector
- Join Paths
    Looks up the MAL query and "composes" multiple joins. *algebra.join -> algebra.joinPath*
- Landscape
- Lifespans
- Macro Processing
- Memoization
- Multiplex Functions
- Remove Actions
- Stack Reduction

** MAL Modules
- Alarm
- Algebra (Important)
- BAT (Important)
- BAT Extensions (Important)
- BBP
- Calculator
- Clients (Important)
- Debugger (Important)
- Factories
- Groups (Important)
- I/O
- Imprints
- Inspect
- Iterators
- Language Extension
- Logger
- MAPI Interface (Important)
- Manual
- PCRE Library
- Profiler
- Remote
- Transaction


* MAL Algebra

|-------------+-------------+----------------+--------------------------------+--------------------------------------|
| Operation   | MAL Cmd     | C Cmd          | Arguments/Return               | Comment                              |
|-------------+-------------+----------------+--------------------------------+--------------------------------------|
| GroupBy     | groupby     | ALGgroupby     | gids :: bat-columntype:oid     | Produces a new BAT with groups       |
|             |             |                | cnts :: bat-columntype:oid     | indentified by the head column.      |
|             |             |                |                                | (The result contains tail times      |
|             |             |                | return :: bat-columntype:oid   | the head value, ie the tail          |
|             |             |                |                                | contains the result group sizes.)    |
|-------------+-------------+----------------+--------------------------------+--------------------------------------|
| Find        | find        | ALGfind        | b :: bat-columntype:any-1      | Returns the index position of a      |
|             |             |                | t :: any-1                     | value. If no such BUN exists         |
|             |             |                |                                | return OID-nil.                      |
|             |             |                | return :: oid                  |                                      |
|-------------+-------------+----------------+--------------------------------+--------------------------------------|
| Fetch       | fetch       | ALGfetchoid    | b :: bat-columntype:any-1      | Returns the value of the BUN at      |
|             |             |                | x :: oid                       | x-th position with                   |
|             |             |                |                                | 0 <= x < b.count                     |
|             |             |                | return :: any-1                |                                      |
|-------------+-------------+----------------+--------------------------------+--------------------------------------|
| Project     | project     | ALGprojecttail | b :: bat-columntype:any-1      | Fill the tail with a constant        |
|             |             |                | v :: any-3                     |                                      |
|             |             |                |                                |                                      |
|             |             |                | return :: bat-columntype:any-3 |                                      |
|-------------+-------------+----------------+--------------------------------+--------------------------------------|
| Projection  | projection  | ALGprojection  | left :: bat-columntype:oid     | Project left input onto right input. |
|             |             |                | rigth :: bat-columntype:any-3  |                                      |
|             |             |                |                                |                                      |
|             |             |                | return :: bat-columntype:any-3 |                                      |
|-------------+-------------+----------------+--------------------------------+--------------------------------------|
| Projection2 | projection2 | ALGprojection2 | left :: bat-columntype:oid     | Project left input onto right inputs |
|             |             |                | rigth1 :: bat-columntype:any-3 | which should be consecutive.         |
|             |             |                | rigth2 :: bat-columntype:any-3 |                                      |
|             |             |                |                                |                                      |
|             |             |                | return :: bat-columntype:any-3 |                                      |
|-------------+-------------+----------------+--------------------------------+--------------------------------------|

*BAT copying*

|-----------+---------+----------+--------------------------------+------------------------------------|
| Operation | MAL Cmd | C Cmd    | Arguments/Return               | Comment                            |
|-----------+---------+----------+--------------------------------+------------------------------------|
| Copy      | copy    | ALGcopy  | b :: bat-columntype:any-1      | Returns physical copy of a BAT.    |
|           |         |          |                                |                                    |
|           |         |          | return :: bat-columntype:any-1 |                                    |
|-----------+---------+----------+--------------------------------+------------------------------------|
| Exist     | exist   | ALGexist | b :: bat-columntype:any-1      | Returns whether 'val' occurs in b. |
|           |         |          |                                |                                    |
|           |         |          | return :: bit                  |                                    |
|-----------+---------+----------+--------------------------------+------------------------------------|

*select*
ALGselect1
ALGselect2
ALGselect1nil
ALGselect2nil

*thetaselect*
ALGthetaselect1
ALGthetaselect2

*selectNotNil*
ALGselectNotNil

*sort*
ALGsort11
ALGsort12
ALGsort13
ALGsort21
ALGsort22
ALGsort23
ALGsort31
ALGsort32
ALGsort33

*unique*
ALGunique2
ALGunique1

**Join operations**
*crossproduct*
ALGcrossproduct2

*join*
ALGjoin
ALGjoin1

*leftjoing*
ALGleftjoin
ALGleftjoin1

*outerjoin*
ALGouterjoin

*semijoin*
ALGsemijoin

*thetajoin*
ALGthetajoin

*band join*
ALGbandjoin

*rangejoin*
ALGrangejoin

*difference*
ALGdifference

*intersect*
ALGintersect

**Projection operations**
*firstn*
ALGfirstn
*reuse*
ALGreuse
# The second group uses the head to perform the range selection
*slice*
ALGslice_oid
ALGslice
ALGslice_int
ALGslice_lng
*subslice*
ALGsubslice_lng

**Common BAT Aggregates**
# These operations examine a BAT, and compute some simple aggregate result
# over it.
*count*
ALGcount_bat
ALGcount_nil
*count_no_nil*
ALGcount_no_nil
# the variants with a candidate list
*count*
ALGcountCND_bat
ALGcountCND_nil
*count_no_nil*
ALGcountCND_no_nil

**Default Min and Max**
# Implementations a generic Min and Max routines get declared first. The
# @emph{min()} and @emph{max()} routines below catch any tail-type.
# The type-specific routines defined later are faster, and will
# override these any implementations.
*cardinality*
ALGcard
*min*
ALGminany
ALGminany_skipnil
*max*
ALGmaxany
ALGmaxany_skipnil

PATTERN
*avg*
CMDcalcavg

**Standard deviation**
# The standard deviation of a set is the square root of its variance.
# The variance is the sum of squares of the deviation of each value in the set
# from the mean (average) value, divided by the population of the set.
*stdeb*
ALGstdev
*stdevp*
ALGstdevp
*variance*
ALGvariance
*variancep*
ALGvariancep
*covariance*
ALGcovariance
*covariancep*
ALGcovariancep
*corr*
ALGcorr
